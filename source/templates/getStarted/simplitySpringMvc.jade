include ../header
script(src='../../js/home.js')
div.downloadsContainer
  div.downloadsInnerContainer
    div.downloadsHeader Simplity with Spring MVC
    div.downloadsDesc Integration of Simplity with Spring MVC.
    div.line
    div.releaseContainer
      div.accordian 
        div.accordianName Steps to integrate Simplity with Spring MVC
      div.releaseInnerContainer
        div.releaseList1 1. Get simplity kernel
        div.line
        div.stable For Maven users-
        ul.codeoptions
          button.copyCode(onclick="toClipboard('dependency1')") copy code
        div.box
          div.dependency#dependency1 &lt;dependency&gt; </br>&lt;groupId&gt;org.simplity&lt;groupId&gt; </br>&lt;artifactIdId&gt;simplity&lt;/artifactId&gt;</br>&lt;version&gt;1.2&lt;/version&gt;</br>&lt;/dependency&gt;
        </br>
        div.stable Plain Java-
        ul.codeoptions
          button.copyCode(onclick="toClipboard('dependency2')") copy code
        div.box
          div.dependency#dependency2 &lt;dependency&gt; </br>&lt;groupId&gt;org.simplity&lt;/groupId&gt; </br>&lt;artifactIdId&gt;simplity&lt;/artifactId&gt;</br>&lt;version&gt;1.2&lt;/version&gt;</br>&lt;/dependency&gt;
        div.releaseList1 2. Creating project
        div.line
        ul.creationSteps
          li Create a new "Maven Project" in eclipse
          li Configure web.xml to have the following entry
            div
              div.stable1    
              ul.codeoptions1
                button.copyCode(onclick="toClipboard('webxml')") copy code
              div.boxcustom#webxml
                &lt;servlet&gt;</br>&nbsp;&nbsp;&lt;servlet-name&gt;SimplityStartup&lt;/servlet-name&gt;</br>&nbsp;&nbsp;&lt;servlet-class&gt;org.simplity.http.Startup&lt;/servlet-class&gt;</br>&nbsp;&nbsp;&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</br>&lt;/servlet&gt;</br>&lt;servlet&gt;</br>&nbsp;&nbsp;&lt;servlet-name&gt;s&lt;/servlet-name&gt;</br>&nbsp;&nbsp;&lt;servlet-class&gt;org.simplity.http.Serve&lt;/servlet-class&gt;</br>&lt;/servlet&gt;</br>&lt;servlet-mapping&gt;</br>&nbsp;&nbsp;&lt;servlet-name&gt;s&lt;/servlet-name&gt;</br>&nbsp;&nbsp;&lt;url-pattern&gt;*._s&lt;/url-pattern&gt;</br> &lt;/servlet-mapping&gt;</br></br>
          li Also add spring related configuration in web.xml.
        div.releaseList1 3. Application Configuration
        div.line
        ul.creationSteps
          li Create component folder structure under WEB-INF as follows:
            ul
              li
                ul comp
                  li dt
                  li msg
                  li rec
                  li service
                    ul
                      li tp
                  li sql
          </br>
          li Configure application.xml under WEB-INF/comp as follows.
            div
              div.stable1    
              ul.codeoptions1
                button.copyCode(onclick="toClipboard('appxml')") copy code
              div.boxcustom#appxml
                &lt;?xml version="1.0" encoding="UTF-8"?&gt;</br>&lt;application</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns="http://www.simplity.org/schema"</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;applicationId="HelloWorld"</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;autoLoginUserId="100"</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logSqls="true"&gt;</br>&lt;/application&gt;</br>&nbsp;&nbsp;
              ul 
                li This is the root file of simplity which helps to configure various features of Simplity. Here <b>"applicationId"</b> is a mandatory field which represents the application name. applicationId should be a unique name for the application.
                li <b>NOTE:</b> To get more help, click ctrl + tab from the eclipse editor.
          </br>
          li Create Simplity record under WEB-INF/comp/rec as follows.
            div
              div.stable1    
              ul.codeoptions1
                button.copyCode(onclick="toClipboard('employeexml')") copy code
              div.boxcustom#employeexml
                &lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</br>&lt;record name="Employee" </br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recordType="storage"</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tableName="EMPLOYEE"</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyToBeGenerated="true"</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;okToSelectAll="true"</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns="http://www.simplity.org/schema"&gt;</br>&nbsp;&nbsp;&lt;fields&gt;</br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;field columnName="EMPLOYEE_ID" dataType="_number" fieldType="primaryKey" name="employeeId" </br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlTypeName="INTEGER"/&gt;</br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;field columnName="EMPLOYEE_NAME" dataType="_text" fieldType="data" name="employeeName" </br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlTypeName="VARCHAR"/&gt;</br>&nbsp;&nbsp;&lt;/fields&gt;</br>&lt;/record&gt;</br></br> 
              ul
                li Simplity records are kept under the comp/rec folder. This is the main part of data model. Data structures that are used as input to, or output from a service are modeled as records. Following are the fields of simplity record:
                li <b>name (mandatory field) </b>- name of the record or entity
                li <b>moduleName (optional field) </b>- sub-folder name inside rec folder. In this example(rec/login/user.xml) record name is user.xml and module name login.
                li <b>recordType (mandatory field) </b>- STORAGE (represents a row of a table being stored in an rdbms), VIEW (a view involving one or more storage records), STRUCTURE (record structure used by the application, but is not linked to any stored data).
                li <b>tableName (optional field) </b>- name of the db table, if recordType is STORAGE or VIEW.
                li <b>keyToBeGenerated (optional field) </b>- true/false (if any table column value to be generated automatically)
                li <b>okToSelectAll (optional field) </b>- true/false(set true to select all rows from the table)
          </br>
          li Create Simplity service under WEB-INF/comp/service/tp as follows.
            div
              div.stable1    
              ul.codeoptions1
                button.copyCode(onclick="toClipboard('saveemployeexml')") copy code
              div.boxcustom#saveemployeexml
                &lt;?xml version="1.0" encoding="UTF-8"?&gt;</br>&lt;service name="saveEmployee" xmlns="http://www.simplity.org/schema"&gt;</br></br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;inputData&gt;</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;inputFields&gt;</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;inputField dataType="_text" name="employeeName"/&gt;</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;inputField dataType="number" name="employeeId"/&gt;</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;inputFields&gt;</br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/inputData&gt;</br></br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;actions&gt;</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//perform save action</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;save saveAction="add" recordName="employee"&gt;</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//set output status</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;setValue fieldName="dbaction" fieldValue="Record saved successfully"&gt;&lt;/setValue&gt;</br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/actions&gt;</br></br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;outputData fieldNames="dbaction"&gt;&lt;/outputData&gt;</br></br>&lt;/service&gt;</br></br> 
          </br>
          li Create Spring controller class and call the simplity service using JavaAgent as follows.
            div
              div.stable1    
              ul.codeoptions1
                button.copyCode(onclick="toClipboard('javaagent')") copy code
              div.boxcustom#javaagent
                &nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value="/save",method = RequestMethod.POST)</br>&nbsp;&nbsp;&nbsp;&nbsp;public @ResponseBody String callSimplityService(@RequestParam String employeeId, @RequestParam String employeeName) {</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaAgent javaAgent = JavaAgent.getAgent("100", null);</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String payLoad = "{'employeeId':'employeeId', 'employeeName':'employeeName'}";</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServiceData outdata = javaAgent.serve("saveEmployee", payLoad, PayloadType.JSON);</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(outdata.getPayLoad());</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return outdata.getPayLoad();</br>&nbsp;&nbsp;&nbsp;&nbsp;}</br></br> 
                
include ../footer