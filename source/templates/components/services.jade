include ../header
div.downloadsContainer
  div.downloadsInnerContainer
    div.downloadsHeader Services
    div.downloadsDesc Services are component which help in transaction processing. A service is uniquely identified by clients with its published name. We recommend a qualified name of the form module.serviceName. For large projects you may go in for module.subModule.serviceName etc.
    br 
    strong Simplity has several features that simplify designing transaction processing systems that use RDBMS as their data base.
    div.line
    h3 Service Context
    p Service context has the following attributes.
      ul
        li userId - This is the value that identifies the logged-in user for whom this service is being executed. In case the data base tables have special columns like createdBy and modifiedBy, this is the value that would be pushed such columns. Also, actions may use this value to check for user privileges. This is a read-only field, and can be copied to any field using CopyUserId Action.
        li messages - service accumulates messages during the execution of service. You ay add a message explicitly with AddMessage Action.
        li ields - this is a collection of name-value pairs. Values are of type text, integer, decimal, date or boolean. You may explicitly set value of a field using SetValue Action. Several actions end up adding fields to this collection. When execution of actions complete, service uses this collection to get values of fields as specified in output specification.
        li data sheets - Collection of tabular data identified by sheet name. Each row of the sheet has the same number of cells, one for each column. Several actions use sheets as inputs and create new sheets. You may manipulate a sheet using actions like AddColulumn, CopyRows, RenameSheet etc. Data sheets can be created and manipulated in your Java code with a rich set of APIs exposed by the DataSheet interface as well as Fields interface.
        custom objects - Collection of any Object, indexed by unique name. Accessible to your java code, and can be used to pass parameters across logic actions. Note that you should always try to use the standard fields and data sheets as far as possible, and resort to custom object only as a last resort. all the data and messages during the course of a service execution. Data includes fields and data sheets. Service context also has provisions to carry any arbitrary object that can be exchanged between logic actions.
    div.line
    h3 Service Execution
    ul
        li
            p
              | A service context is created for this service with the userId for the logged-in user.
          li
            p
              | Input data is parsed as per input specification into the service context.  If there are any errors, service returns the error message(s) as response.
          li
            p
              | Session fields are copied into the service context. At this point, all session fields, input fields and input data sheets are available in the service context.
          li
            p
              | If this service specifies data base access, a JDBC connection to the db is established.
          li
            p
              | If the service specifies write access, a transaction is started for this connection.
          li
            p Service execution now starts with the first action.
          li
            p Service execution continues in a sequence, except for JumpTo and Loop action.
          li
            p
              | If any exception is thrown during the execution, service rolls back the transaction and returns to client with the error message.
          li
            p
              | When the service completes, either after executing the last action, or because of a JumpTo directive, context is checked for error messages. In case of any error message, transaction is rolled back, and the service responds with the error message(s)
          li
            p
              | If there are no error messages in the context, then the transaction is committed. A response is prepared based on the output specification.
          li
            p
              | Service now returns with the response, as well as any session fields that may have been requested back.
    div.line
    p Service has the following attributes
    br
    table
      colgroup
          col
          col
          col
        tbody
          tr
            th
              p Attribute name
            th
              p Required?
            th
              p Description
          tr
            td
              p name
            td
              p yes
            td
              p
                | Should be same as the file name (without .xml) in which this specification is saved. This would be the last part of the qualified name.
          tr
            td
              p moduleName
            td
              p no
            td
              p
                | Should match the folder structure under which this component is saved. If a.b.c is the published name of this service then module name is a.b, service name is c, and the component is saved as /a/b/c.xml  under the the root folder meant for saving services.
          tr
            td
              p dbAccessType
            td
              p yes
            td
              p
                | none - no db access
                | * readOnly - only read access. No write.
                | * readWrite - write access, under a transaction.
                | * autoCommit - write access but no transactions. Writes are immediately committed and no roll-back is possible. Should be used with care, as the service may end-up with half of its work done.
                | * subservice - this service consists of other services and no other action. Each such service manages its own dbAccess.
          tr
            td
              p inputData
            td
              p no
            td
              p specified data that is expected from client
          tr
            td
              p outputData
            td
              p no
            td
              p
                | specifies what data need to be sent t client on success of this service. In case of error, output data is ignored and error messages are sent instead.
          tr
            td
              p actions
            td
              p yes
            td
              p actions to be executed
          tr
            td
              p schemaName
            td
              p no
            td
              p
                | special case where an application uses more than one schema. Default schema is assigned to the login credentials associated with application. Use this feature for a service that uses a schema other than this default one.
          tr
            td
              p requestTextFieldName
            td
              p no
            td
              p
                | Special case where a custom logic is designed to process the request data that is received as string. For example json. Request string is copied to this field as it is and the service starts executing the actions.
          tr
            td
              p responseTextFieldName
            td
              p no
            td
              p
                | Special case where the string with which this service need to respond back is already decided and formatted by some action into a field. Output specification is ignored and text from this field is used as response.
          tr
            td
              p referredserviceForInput
            td
              p no
            td
              p
                | fully qualified name of another service that has the same input requirement. This is a simple feature to avoid duplicating input specification across related services that are expecting the same input by design.
          tr
            td
              p referredserviceForOutput
            td
              p no
            td
              p
                | fully qualified name of another service that has the same output requirement. This is a simple feature to avoid duplicating output specification across related services that are expected to respond with same set of data by design.
          tr
            td
              p executeInBackground
            td
              p no
            td
              p
                | true if this service must be executed in background always. Service request would return with an information message that the service has been successfully initiated.
          tr
            td
              p canBeCachedByFields
            td
              p no
            td
              p applicable if caching is enabled for the application. Possible values
              p * null - default. Do not cache
              p * &quot;empty string&quot; cache this. Example : countries in the world.
              p
                | * &quot;fieldName&quot; cache this based on values of field1. Example : stateNames cached by country code. You can specify more than one fields as a comma separated list.
              p
                | * &quot;userId&quot; cache this per user. That is, response is same for a given user, but different for different users. Example : user preferences
              p
                | Though this is very similar to caching for a value of a field, the caching strategy could be different because of user-sessions. &quot;_userId,fieldName,field2,..&quot; combination of above two cases. That is, this is to be cached per user, but also based on values of one or more field values.
    div.line
    h3 Input Data
    p Input specification determines the input data that the client need to provide for this service.
    br
    table
      colgroup
          col
          col
          col
        tbody
          tr
            th
              p Attribute name
            th
              p Required?
            th
              p Description
          tr
            td
              p inputFields
            td
              p no
            td
              p refer to attributes of Input Field
          tr
            td
              p inputRecords
            td
              p no
            td
              p refer to attributes of Input Record
          tr
            td
              p attachmentFields
            td
              p no
            td
              p
                | Applicable if attachment management is enabled for this application. Refer to attachmentAssistsnt in application.xml, comma separated list of field names that are associated with attachments. That is, a field that is designed to carry the key to an attachment that is stored outside. For example resumeId could be a field in the employeeMaster that is the key to the document that is stored outside.  Simplity takes care of picking the attachment from temporary storage based on the key in this field, saving it into permenant area using attachmentAssistant, and replacing the key in this field to the new key for tthis permenant storage.
          tr
            td
              p attachmentColumns
            td
              p no
            td
              p
                | similar to attachmentFields, but meant for columns in data sheets. Comma separated list of sheetName.columnName.	
    div.line
    h3 inputField
    br
    table
        colgroup
          col
          col
          col
        tbody
          tr
            th
              p Attribute name
            th
              p Required?
            th
              p Description
          tr
            td
              p name
            td
              p yes
            td
              p As per your naming convention, but no spaces please
          tr
            td
              p dataType
            td
              p yes
            td
              p
                | Ensure that you define the right data type for this field, and not use generic ones like text/date. Data type definition is used for validating the data input.
          tr
            td
              p isRequired
            td
              p no
            td
              p defaults to optional. Used for validating input.
          tr
            td
              p defaultValue
            td
              p no
            td
              p
                | in case you want to use a default value for a field that is required. Note that this value has no effect if the field is marked as optional.	
    div.line
    h3 inputRecord
    br
    table
        colgroup
          col
          col
          col
        tbody
          tr
            th
              p Attribute name
            th
              p Required?
            th
              p Description
          tr
            td
              p recordName
            td
              p yes
            td
              p fully qualified name of record
          tr
            td
              p sheetName
            td
              p no
            td
              p
                | Name of sheet (table) to which the array of data is to be extracted into. DO not specify this if data is not expected in an array.
          tr
            td
              p fieldnames
            td
              p no
            td
              p
                | In case you are expecting a subset of the fields of this record. This is a comma separated list of column names.
          tr
            td
              p minRows
            td
              p no
            td
              p Minimum number of rows expected.
          tr
            td
              p maxRows
            td
              p no
            td
              p
                | Maximum number of columns. It is certainly a good practice to put a practical limit.
          tr
            td
              p dataPurpose
            td
              p no
            td
              p
                | Convenient feature to manage input for the same database table, but for different operations like read, update etc..
              p
                | *read: Only key field of this record is expected, and it is mandatory. To be sued if this service is meant to read a key-based row from the table/view  associated with this record
              p
                | *filter: If this service is meant to search/filter rows from the underlying table/view. All fields would be optional, irrespective of the specification in the record. Also, each field can have the operator to be used for the value with the field name as &lt;fieldname&gt;Operator.  In case the field is number or date, and the operator is between (&gt;&lt;) then an additional value is expected in field name &lt;fieldname&gt;To. Default operator is =. &lt;, &lArr;, &gt;, &gt;=, !=, ~(like), and &gt;&lt;(between) are the valid operators. Refer to filter step.
              p
                | *save : insert of update of records. Primary key is ignored for insert if key is to be generated, while it is mandatory for update. Time stamp field, if specified in record, would be mandatory for update operation.
              p *subset: all fields, other than the primary key, are optional.
          tr
            td
              p saveActionExpected
            td
              p no
            td
              p
                | If purpose is save we may expect  a special field called _saveAction. You may make this field mandatory with this attribute. Default is to decide the action based on presence of key value.
          tr
            td
              p parentSheetName
            td
              p no
            td
              p
                | Used for receiving hierarchical data. If specified, rows for this record would be present as arrays in each row of the parent sheet with this sheet name as attribute name. &lt;Refer to an example in tutorial&gt;
          tr
            td
              p linkColumnInThisSheet
            td
              p no
            td
              p
                | Required if parentSheetName is specified. Name of the column in this sheet that has the key value of the parent sheet.
          tr
            td
              p linkColumnInParentSheet
            td
              p no
            td
              p
                | Required if parentSheetName is specified. Name of the column in the parent sheet that has the key value.
    div.line
    h3 Output Data	
    p Output specification determines the data to be sent to client as a response to this service request. You may specify fields, sheet, or hierarchical data as output. Output specification is used only when the service succeeds. Hence we assume that the service context has all the right data to be sent to the client. We do not carry out any validation.
    br
    table
          colgroup
            col
            col
            col
          tbody
            tr
              td
                p Attribute name
              td
                p Required?
              td
                p Description
            tr
              td
                p fieldnames
              td
                p no
              td
                p comma separated list of fields to be returned
            tr
              td
                p outputRecords
              td
                p no
              td
                p refer to Output Record
            tr
              td
                p attachmentFields
              td
                p no
              td
                p
                  | refer to same attribute in Input Data. Simplity manages to retrieve the attachment using the key in this field, saves content into temp area, and changes this field value with the key to this temp area file.
            tr
              td
                p attachmentColumns
              td
                p no
              td
                p
                  | similar to attachmentFields, but meant for columns in data sheets. Comma separated list of sheetName.columnName.
            tr
              td
                p sessionFields
              td
                p no
              td
                p
                  | if you need to save/update session fields, use this feature. For example if the user preferences are saved as session fields, and user changes a preference, then that service will have to reset the session field value.
    div.line
    h3 outputRecord
    p Use a record to specify fields, sheet or hierarchical data.
    br
    table
            colgroup
              col
              col
              col
            tbody
              tr
                th
                  p Attribute name
                th
                  p Required?
                th
                  p Description
              tr
                td
                  p recordName
                td
                  p yes
                td
                  p Fully qualified name of record
              tr
                td
                  p sheetName
                td
                  p no
                td
                  p
                    | If omitted, column field of this record are used for outputting fields. If sheet name is specified, a data sheet with this name is expected in the service context. Rows from this sheet are output as a sheet, or part of hierarchical data based on parentSheetName attribute.
              tr
                td
                  p parentSheetName
                td
                  p no
                td
                  p
                    | Name of the sheet of which this sheet is the child. Rows from this sheet are output as child rows of relevant parent row.
              tr
                td
                  p linkColumnInThisSheet
                td
                  p no
                td
                  p
                    | Required if parentSheetName is specified. Name of the column in this sheet that has the key value of the parent sheet.
              tr
                td
                  p linkColumnInParentSheet
                td
                  p no
                td
                  p
                    | Required if parentSheetName is specified. Name of the column in the parent sheet that has the key value.

    div.line
    h3 Actions
    p Actions implement the logic/design of your service.Each action does a part of the over-all work. As far as possible, actions are to be designed independent of other actions in the service, just as a service is designed independent of other services in an application.Simplity has been extensively used to deliver services that are part of transaction processing system. We have designed several actions that are well suited to carry out part of such transactions.
    br
    ul
      li #[b AddColumn] :  Helps in adding column to a data sheet.
      br
      li #[b AddMessage] :   Add a message to the context..
      br
      li #[b Complexlogic] :  Logic that is implemented in a java code.
      br
      li #[b CopyRows] :  Copy rows from a compatible sheet.
      br
      li #[b CopyUserId] :   userId id saved in session on login, and is copied into the service context. You can copy this value into any other field you want to deal with.
      br
      li #[b CreateSheet] :  Set rows and columns to a table.
      br
      li #[b Download] :  Download a file from permanent storage to temp storage.
      br
      li #[b ExecuteSP] :  If your db operation is more complex, you may write a stored procedure and execute it using this action.
      br
      li #[b ExecuteSql] :  you may design your own sql.Such sql is executed as a prepared statement using this action.
      br
      li #[b Filter] : Read rows from the underlying table/view based on the filtering criteria. Rows from one or more child-tables can also be read as part of this action.
      br
      li #[b JumpTo] : Service has actions that are executed in a sequence. JumpTo allows you to change this sequence.
      br
      li #[b Log] : Log values of fields and sheets into trace.
      br
      li #[b Logic] : Logic that is implemented in a java code.
      br
      li #[b Loop] : Loop through a set of actions for each row in a data sheet.
      br
      li #[b Read] : Read a row from the underlying table/view based on the primary key value. Columns from this row are set as field values in the service context. Rows from one r more child-tables can also be read as part of this action.
      br
      li #[b ReadWithSql] : Read a row/s from as output of a prepared statement/sql.Rows from one or more child-tables can also be read as part of this action.
      br
      li #[b RenameSheet] : Change the name of a data sheet using this action.
      br
      li #[b RowExists] : Check if a row exists in this record for the primary key.
      br
      li #[b Save] : Add, update or delete rows of data based on specification in a record. While adding we handle primary key generation, as well as values for fields like createdBy, created at etc.
      br
      li #[b SetValue] : Set a field value using an expression that is evaluated at run time.
      br
      li #[b SubService] : Service that is to be executed as a step/action in side another service.  
      br
      li #[b Suggest] : Speciffically design to provide suggested value for a goolgle-suggest-like control on the client. Columns from matching rows are populated into the output sheet, based on a record definition.
      br
      li #[b Upload] :  Upload a file from temp storage to permanent storage and change the file key/token.
    p Common Action Attributes are
    br
    table
          colgroup
            col
            col
            col
          tbody
            tr
              th
                p Attribute name
              th
                p Required?
              th
                p Description
            tr
              td
                p actionName
              td
                p no
              td
                p
                  | Required only if you use it as a destination of a jump-to action, or you want to use the returned value from this action. If this action returns a value, that value is added to the service context with field name as &lt;actionName&gt;Result. This can be used by subsequent steps.
                  | We assign a default name to every action for our convenience and hence you may find some fields like &quot;_action1Result&quot; if you inspect content of context. You should not use these in any of your code, because we may change these in our subsequent versions.
            tr
              td
                p executeOnCondition
              td
                p no
              td
                p
                  | An optional Boolean expression. If present, the expression is evaluated at run time and the action is executed only if it evaluates to true. Else the execution proceeds to next action.
            tr
              td
                p executeIfRowsInSheet
              td
                p no
              td
                p
                  | Another way to set a condition for the action to execute. Not valid if executeOnCondition is specified. This action is executed only if the service context has the named sheet, and the sheet has at least one row
            tr
              td
                p executeIfNoRowsInSheet
              td
                p no
              td
                p
                  | Complement of the above. Action is executed if sheet is not found, or there are no rows in the sheet.    
    div.line
    h3 RDBMS based Actions
    p  Dealing with data base is the core of any transaction processing system. We have designed a set of actions to help you in that. They have the following common attributes (in addition to all the common attributes of action)
    br
    table
          colgroup
            col
            col
            col
          tbody
            tr
              th
                p Attribute name
              th
                p Required?
              th
                p Description
            tr
              td
                p successMessageName
              td
                p no
              td
                p
                  | Name of a message to be sent back to client in case the action succeeds. Note that the message itself could be of type success/failure. For example, if you are looking to validate a new mail id, you may do a key-based read. And if the action succeeds, it means that the mail id already exists, and you would send an error message back to client.
            tr
              td
                p successMessageParameters
              td
                p no
              td
                p
                  | Optional comma separated list of field names, whose values are used to format the message mentioned above. Note that the number of parameters and their sequence should match the parameterization design of the message.  Refer to message design for more details.
            tr
              td
                p failureMessageName
              td
                p no
              td
                p Message to use used if the action fails.
            tr
              td
                p failureMessageParameters
              td
                p no
              td
                p
                  | Optional comma separated list of field names, whose values are used to format the message mentioned above. Note that the number of parameters and their sequence should match the parameterization design of the message.  Refer to message design for more details.
            tr
              td
                p stopIfMessageTypeIsError
              td
                p no
              td
                p
                  | This action will result in either a success, or a failure. If a message is associated with the result, and the message happens to be of type error, should the execution stop immediately, or should it continue.
include ../footer